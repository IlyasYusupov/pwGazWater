@page "/projectGasification"

@using Microsoft.Extensions.Logging
@using pwGazWater.Data

@inject IWebHostEnvironment Environment
@inject SingletonServise servise
@inject NavigationManager manager

@if (user.GetType().Name == "Developer")
{
    <table class="table"> 
        <thead>
            <tr>
                <th>Documents name</th>
                <th>Select file</th>
                <th>Add to DB</th>
                <th>Delete</th>
                <th>Load</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var i in DeveloperDict)
            {
                <tr>
                    <td>@DeveloperDict[i.Key]</td>
                    <td> <InputFile OnChange="LoadFiles" /> </td>
                    <td> <button type="button" class="btn btn-success" @onclick="() => AddToDBDeveloper(DeveloperDict[i.Key])">Add</button> </td>
                    <td> <button type="button" class="btn btn-danger" @onclick="() => Delete()">delet</button> </td>
                    @if (docs.Find(x => x.Name == DeveloperDict[i.Key]) != null && docs.Find(x => x.Name == DeveloperDict[i.Key]).Name == DeveloperDict[i.Key])
                    {
                        <td> <button type="button" class="btn btn-info">Load</button></td>
                    }
                </tr>
            }
        </tbody>
    </table>
}
@if (user.GetType().Name == "Planner")
    {
        <table class="table"> 
        <thead>
            <tr>
                <th>Documents name</th>
                <th>Info</th>
                <th>Add to DB</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var i in PlannerDict)
            {
                <tr>
                    <td>
                        <label>
                            @PlannerDict[i.Key]
                        </label>
                    </td>
                    <td> <input type="text" class="text-muted mb-0" @bind-value=text /></td>
                        <td> <button type="button" class="btn btn-danger" @*@onclick="() => Edit(PlannerDict[i.Key]*@)">Edit</button> </td>
                    <td>
                        <button type="button" class="btn btn-success" @onclick="() => AddToDB(PlannerDict[i.Key])">
                        Add
                    </button>
                    </td>
                    <td> <button type="button" class="btn btn-danger" @onclick="() => Delete()">delet</button> </td>
                </tr>
            }
                @*<tr>
                    <td>
                        <label>
                            Производительность БОС, м3/сут
                        </label>
                    </td>
                    <td> <input type="text" class="text-muted mb-0" @bind-value=text /></td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB()">Add</button></td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => Delete()">delet</button> </td>
                </tr>

                <tr>
                    <td>
                        <label>
                            кол.-во (шт) и производительность КНС (м3
                            /ч)
                        </label>
                    </td>
                    <td> <input type="text" class="text-muted mb-0" @bind-value=text /></td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB()">Add</button></td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => Delete()">delet</button> </td>
                    </tr>

                    <tr>
                    <td>
                        <label>
                            Сметная стоимость работ, тыс. руб.
                        </label>
                    </td>
                    <td> <input type="text" class="text-muted mb-0" @bind-value=text /></td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB()">Add</button></td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => Delete()">delet</button> </td>
                    </tr>
                    <tr>
                    <td>
                        <label>
                            Срок разработки проектной документации, месяцев
                        </label>
                    </td>
                    <td> <input type="text" class="text-muted mb-0" @bind-value=text /></td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB()">Add</button></td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => Delete()">delet</button> </td>
                    </tr>*@

            </tbody>
        </table>
}
else
{
    
}


@code {
    private IBrowserFile loadedFile;
    private IBrowserFile File;
    User user;
    string tr;
    List<DeveloperDocument> docs;
    List<PlannerDocument> docss;
    string text = string.Empty;

    protected override void OnInitialized()
    {
        switch (servise.GetUser().GetType().Name)
        {
            case "Developer":
                user = servise.GetUser() as Developer;
                docs = servise.GetProject().Documents;
                break;
            case "Planner":
                user = servise.GetUser() as Planner;
                docss = servise.GetProject().Documentss;
                break;
        }

    }


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            loadedFile = e.File;
            var path = Path.Combine(Environment.ContentRootPath,
                    "wwwroot", "files",
                loadedFile.Name);
            await using FileStream fs = new(path, FileMode.Create);
            await loadedFile.OpenReadStream(10000000000000).CopyToAsync(fs);
        }
        catch( Exception ms)
        {
            tr = ms.Message;
        }

    }

    private void Delete()
    {

    }

    private void AddToDB(string name)
    {
        if (loadedFile != null)
        {
            FileSystemService fs = new FileSystemService();
            string path = Path.Combine(Environment.ContentRootPath,
                            "wwwroot", "files",
                            loadedFile.Name);
            fs.UploadToDb(loadedFile, path);
            var newDocs = new PlannerDocument(name, false)
            {
                Text = text
            };
            servise.GetProject().Documentss.Add(newDocs);
            Mongo.ReplaceProject(servise.GetProject().Name, servise.GetProject());
        }
        else
        {
            return;
        }
    }

    private void AddToDBDeveloper(string fileName)
    {
        if (loadedFile != null)
        {
            FileSystemService fs = new FileSystemService();
            string path = Path.Combine(Environment.ContentRootPath,
                            "wwwroot", "files",
                            loadedFile.Name);
            fs.UploadToDb(loadedFile, path);
            var newDoc = new DeveloperDocument(fileName, false)
            {
                FileName = loadedFile.Name
            };
            servise.GetProject().Documents.Add(newDoc);
            Mongo.ReplaceProject(servise.GetProject().Name, servise.GetProject());
        }
        else
        {
            return;
        }
    }

    Dictionary<int, string> DeveloperDict = new Dictionary<int, string>()
    { {0, "Письмо-обращение на имя Президента, Премьер-Министра, Минстрой РТ" },
      {1, "Задание на проектирование" },
      {2, "Ситуационный план (утвержденныйисполкомом)" },
      {3, "Технические условия на присоединение кгазораспределительной сети (№, дата,срок действий Технических условий)" },
      {4, "Технический паспорт (план БТИ) объекта СКБ" },
      {5, "Технический паспорт (план БТИ) существующей котельной" },
      {6, "АКТ обследования объекта" },
      {7, "Технические условия на сети электроснабжение, водоснабжения, водоотведения при установке БМК" },
      {8, "Согласование посадки котельной" },
    };

    Dictionary<int, string> PlannerDict = new Dictionary<int, string>()
    {
      {0, "Диаметр (мм) трубопровода и протяженность линейного объекта (м)" },
      {1, "Срок разработки проектной документации,месяцев" },
      {2, "Срок разработки проектной документации,месяцев" },
    };
}


