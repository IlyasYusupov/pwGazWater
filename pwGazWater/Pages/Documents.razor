@page "/documents"

<PageTitle>Documents</PageTitle>

@using pwGazWater.Data

@inject NavigationManager manager
@inject SingletonServise servise
@using Microsoft.Extensions.Logging
@inject IWebHostEnvironment Environment

<h3>Projects</h3>

    <div class="d-flex justify-content-center">
        <button type="button"
                class="btn btn-success btn-block btn-lg gradient-custom-4 text-body" @onclick=ProjectCreate>
            Create project
        </button>
    </div>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Document</th>
                <th>Size (bytes):</th>
                <th>Content type:</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in loadedFiles)
            {
                <tr>
                    <td>@file.Name</td>
                    <td>@file.Size</td>
                    <td>@file.ContentType</td>
                    <td>
                        <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Add to DB</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<IBrowserFile> loadedFiles = new List<IBrowserFile>();
    private bool isLoading;
    int maxAllowedFiles = 1;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        if (e.FileCount > maxAllowedFiles || e.FileCount < maxAllowedFiles)
            return;
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            loadedFiles.Add(file);
            var path = Path.Combine(Environment.ContentRootPath,
                    "wwwroot", "unsafe",
                    file.Name);
            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(10000000000000).CopyToAsync(fs);
        }
        isLoading = false;
    }

    private void AddToDB(IBrowserFile file)
    {
        FileSystemService fs = new FileSystemService();
        string path = Path.Combine(Environment.ContentRootPath,
                        "wwwroot", "unsafe",
                        file.Name);
        fs.UploadImageToDb(file, path);
        loadedFiles.Remove(file);
    }

    private void ProjectCreate()
    {
        manager.NavigateTo("project");
    }
}