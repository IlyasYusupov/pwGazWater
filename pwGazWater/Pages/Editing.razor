@page "/editing"

<PageTitle>Profile</PageTitle>

@using pwGazWater.Data
@inject IWebHostEnvironment Environment
@using System.IO

@inject NavigationManager manager
@inject SingletonServise servise

<section style="background-color: #eee;">
        <div class="row">
        <div class="col-lg-4" style="height: 350px">
            <div class="card mb-4">
                <div class="card-body text-center" style="height: 330px">
                    <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava3.webp" alt="avatar"
              class="rounded-circle img-fluid" style="width: 200px;">
                    <h5 class="my-3">@user.Login</h5>
                    <div class="d-flex justify-content-center mb-2">
                    </div>
                </div>
            </div>
            </div>
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-body">
        @if (user.GetType().Name == "Customer")
        {
            <div class="row">
                <div class="col-sm-3">
                    <p class="mb-0">Full name</p>
                </div>
                <div class="col-sm-9">
                    <input type="text" class="text-muted mb-0" @bind-value=FullName/> 
                </div>
            </div>
            <hr>
            <div class="row">
                <div class="col-sm-3">
                    <p class="mb-0">Department</p>
                </div>
                <div class="col-sm-9">
                    <input type="text" class="text-muted mb-0" @bind-value=Department />
                </div>
            </div>
            <hr>
        }
        @if (user.GetType().Name == "Developer")
        {
            <div class="row">
                <div class="col-sm-3">
                    <p class="mb-0">Name</p>
                </div>
                <div class="col-sm-9">
                    <input type="text" class="text-muted mb-0" @bind-value=Name/>
                </div>
            </div>
            <hr>
            <div class="row">
                <div class="col-sm-3">
                    <p class="mb-0">OGRN</p>
                </div>
                <div class="col-sm-9">
                    <input type="text" maxlength="13" class="text-muted mb-0" @bind-value=OGRNDeveloper onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
                </div>
            </div>
            <hr>
            <div class="row">
                <div class="col-sm-3">
                    <p class="mb-0">TIN</p>
                </div>
                <div class="col-sm-9">
                    <input type="text" maxlength="10" class="text-muted mb-0" @bind-value=TINDeveloper onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')"/>
                </div>
            </div>
            <hr>
            <div class="row">
                <div class="col-sm-3">
                    <p class="mb-0">KPP</p>
                </div>
                <div class="col-sm-9">
                    <input type="text" maxlength="9" class="text-muted mb-0" @bind-value=KPPDeveloper onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
                </div>
            </div>
            <hr>
            <div class="row">
                <div class="col-sm-3">
                    <p class="mb-0">Address</p>
                </div>
                <div class="col-sm-9">
                    <input type="text" class="text-muted mb-0" @bind-value=Address />
                </div>
            </div>
            <hr>
            <div class="row">
                <div class="col-sm-3">
                    <p class="mb-0">HeadName</p>
                </div>
                <div class="col-sm-9">
                    <input type="text" class="text-muted mb-0" @bind-value=HeadName />
                </div>
            </div>
            <hr>
        }
        @if (user.GetType().Name == "Planner")
        {
            <div class="row">
                <div class="col-sm-3">
                    <p class="mb-0">Name organization</p>
                </div>
                <div class="col-sm-9">
                    <input type="text" class="text-muted mb-0" @bind-value=NameOrganization />
                </div>
            </div>
            <hr>
            <div class="row">
                <div class="col-sm-3">
                    <p class="mb-0">OGRN</p>
                </div>
                <div class="col-sm-9">
                    <input type="text" maxlength="13" class="text-muted mb-0" @bind-value=OGRNPlanner onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
                </div>
            </div>
            <hr>
            <div class="row">
                <div class="col-sm-3">
                    <p class="mb-0">TIN</p>
                </div>
                <div class="col-sm-9">
                    <input type="text" maxlength="10" class="text-muted mb-0" @bind-value=TINPlanner onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
                </div>
            </div>
            <hr>
            <div class="row">
                <div class="col-sm-3">
                    <p class="mb-0">KPP</p>
                </div>
                <div class="col-sm-9">
                    <input type="text" maxlength="9" class="text-muted mb-0" @bind-value=KPPPlanner onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
                </div>
            </div>
            <hr>
            <div class="row">
                <div class="col-sm-3">
                    <p class="mb-0">Name direcor</p>
                </div>
                <div class="col-sm-9">
                    <input type="text" class="text-muted mb-0" @bind-value=NameDirecor />
                </div>
            </div>
            <hr>
            <div class="row">
                <div class="col-sm-3">
                    <p class="mb-0">Name chief engineer</p>
                </div>
                <div class="col-sm-9">
                    <input type="text" class="text-muted mb-0" @bind-value=NameChiefEngineer />
                </div>
            </div>
            <hr>
        }
            <div class="row">
                <div class="col-sm-3">
                    <p class="mb-0">Email</p>
                </div>
                <div class="col-sm-9">
                    <input type="text" class="text-muted mb-0" @bind-value=Email />
                </div>
            </div>
            <hr>
            <div class="row">
                <div class="col-sm-3">
                    <p class="mb-0">Phone number</p>
                </div>
                <div class="col-sm-9">
                    <input type="text" maxlength="11" class="text-muted mb-0" @bind-value=PhoneNumber onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
                </div>
            </div>
            </div>
            </div>
            @if (Error)
                {
                    <br><div class="alert alert-danger" role="alert">
                        @ErrorText
                    </div>
                }
            <button type="button" width="400" id="LogOut"
                    class="btn btn-success" @onclick=SaveEdit>
                Edit
            </button> 
        </div>
    </div>
</section>

@code {
    User user;
    string PhoneNumber = string.Empty;
    string Email = string.Empty;
    string FullName = string.Empty;
    string Department = string.Empty;
    string Name = string.Empty;
    string OGRNDeveloper = string.Empty;
    string TINDeveloper = string.Empty;
    string KPPDeveloper = string.Empty;
    string OGRNPlanner = "";
    string TINPlanner = string.Empty;
    string KPPPlanner = string.Empty;
    string Address = string.Empty;
    string HeadName = string.Empty;
    string NameOrganization = string.Empty;
    string NameDirecor = string.Empty;
    string NameChiefEngineer = string.Empty;
    bool Error = false;
    string ErrorText = string.Empty;

    protected override void OnInitialized()
    {
        user = servise.GetUser();
        Email = user.Email;
        PhoneNumber = user.PhoneNumber;
        switch (user.GetType().Name)
        {
            case "Customer":
                FullName = (user as Customer).FullName;
                Department = (user as Customer).Department;
                break;

            case "Developer":
                Name = (user as Developer).Name;
                OGRNDeveloper = (user as Developer).OGRN;
                TINDeveloper = (user as Developer).TIN;
                KPPDeveloper = (user as Developer).KPP;
                Address = (user as Developer).Address;
                HeadName = (user as Developer).HeadName;
                break;

            case "Planner":
                OGRNPlanner = (user as Planner).OGRN;
                TINPlanner = (user as Planner).TIN;
                KPPPlanner = (user as Planner).KPP;
                NameOrganization = (user as Planner).NameOrganization;
                NameDirecor = (user as Planner).NameDirecor;
                NameChiefEngineer = (user as Planner).NameChiefEngineer;
                break;
        }
    }

    private void SaveEdit()
    {
        User newUser = null;
        switch (user.GetType().Name)
        {
            case "Customer":
                if (PhoneNumber != string.Empty && PhoneNumber.Length != 11)
                {
                    Error = true;
                    ErrorText = "Неверный формат ввода!";
                    return;
                }
                else
                {
                    Error = false;
                    newUser = new Customer(user.Login, PhoneNumber, Email, user.Password)
                    {
                        FullName = this.FullName,
                        Department = this.Department,
                    };
                }
                break;
            case "Developer":
                if ((OGRNDeveloper != string.Empty && OGRNDeveloper.Length != 13) || (PhoneNumber != string.Empty && PhoneNumber.Length != 11) ||
                    (TINDeveloper != string.Empty && TINDeveloper.Length != 10) || (KPPDeveloper != string.Empty && KPPDeveloper.Length != 9))
                {
                    Error = true;
                    ErrorText = "Неверный формат ввода!";
                    return;
                }
                else
                {
                    Error = false;
                    newUser = new Developer(user.Login, PhoneNumber, Email, user.Password)
                        {
                            Name = this.Name,
                            OGRN = OGRNDeveloper,
                            TIN = TINDeveloper,
                            KPP = KPPDeveloper,
                            Address = this.Address,
                            HeadName = this.HeadName,
                        };
                }

                break;

            case "Planner":
                if ((OGRNPlanner != string.Empty && OGRNPlanner.Length != 13) || (PhoneNumber != string.Empty && PhoneNumber.Length != 11) ||
                    (TINPlanner != string.Empty && TINPlanner.Length != 10) || (KPPPlanner != string.Empty && KPPPlanner.Length != 9))
                {
                    Error = true;
                    ErrorText = "Неверный формат ввода!";
                    return;
                }
                else
                {
                    Error = false;
                    newUser = new Planner(user.Login, PhoneNumber, Email, user.Password)
                    {
                        NameOrganization = this.NameOrganization,
                        OGRN = OGRNPlanner,
                        TIN = TINPlanner,
                        KPP = KPPPlanner,
                        NameDirecor = this.NameDirecor,
                        NameChiefEngineer = this.NameChiefEngineer,
                    };
                }
                break;
        }
        Mongo.Replace(user.Login, newUser);
        servise.SetUser(newUser);
        manager.NavigateTo("profile");
    }
    //private async Task LoadFiles(InputFileChangeEventArgs e)
    //{
    //    var format = "image/*";
    //    IBrowserFile file = e.File;
    //    var path = Path.Combine(Environment.ContentRootPath,
    //                "wwwroot", "unsafe",
    //                file.Name);
    //    var resizedImageFile = await file.RequestImageFileAsync(format, 250, 250);
    //    var buffer = new byte[resizedImageFile.Size];
    //    Stream stream = resizedImageFile.OpenReadStream();
    //    await stream.ReadAsync(buffer);
    //    var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    //    imageUrl = imageDataUrl;
    //    //AddToDB(file);
    //}

    private void AddToDB(IBrowserFile file)
    {
        //FileSystemService fs = new FileSystemService();
        //string path = Path.Combine(Environment.ContentRootPath,
        //                "wwwroot", "unsafe",
        //                file.Name);
        //user.Photo = path;
        //Mongo.UpgradeOne(user.Login, "Photo", path);
        //fs.UploadImageToUserDb(file, path);
    }
}