@page "/projectWaterSupply"

@using Microsoft.Extensions.Logging
@using pwGazWater.Data

@inject IWebHostEnvironment Environment
@inject SingletonServise servise
@inject NavigationManager manager


    <table class="table"> 
        <thead>
            <tr>
                <th>Documents name</th>
                <th>Select file</th>
                <th>Add to DB</th>
                <th>Delete</th>
                <th>Load</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Акт обследования и выбора трассы сети водоснабжения</td>
                <td> <InputFile OnChange="LoadFiles" multiple /> </td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB()">Add</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => Delete()">delet</button> </td>
                <td> <button type="button" class="btn btn-info">Load</button></td>
            </tr>
        @*<tr>
                <td>Акт обследования и выбора места под проектируемую скважину</td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                <td> <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button></td>
            </tr>
            <tr>
                <td> Согласованный ситуационной план (М1:10000 или М1:25000) с нанесением источников воды
                    (скважин, родников и т.п.), существующих водонапорных башен, предполагаемой трассой водопровода
                    и места врезки в существующую сеть</td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                <td>
                    <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button>
                </td>
            </tr>
            <tr>
                <td>План населённого пункта в М1:1000 или М1:500 (топографическая съемка)</td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                <td>
                    <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button>
                </td>
            </tr>
            <tr>
                <td>Техинические условия на водоснабжение</td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                <td>
                    <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button>
                </td>
            </tr>
            <tr>
                <td>Техинические условия на электроснабжение (для насосной станции первого или второго подъема</td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                    <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                    <td>
                    <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button>
                    </td>
            </tr>
            <tr>
                <td>Градостроительный план земельного участка</td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                <td>
                    <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button>
                </td>
            </tr>
            <tr>
                <td>Справка согласования с собственниками земельных участков</td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                <td>
                    <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button>
                </td>
            </tr>
            <td>Докумен, подтверждающий проведение межевания с присвоением кадастрового номера земельного участка
                под строительство водопровода и сооружений на нем
            </td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                <td>
            <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button>
                </td>
            </tr>
            <td>Заключение Органа Ростпотребнадзора санитарно-эпидемиологической службы по отводу</td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                <td>
                    <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button>
                </td>
        </tr>*@
        </tbody>
    </table>


@code {
    private List<IBrowserFile> loadedFiles = new List<IBrowserFile>();
    private bool isLoading;
    int maxAllowedFiles = 1;
    User user;

    protected override void OnInitialized()
    {
        switch (servise.GetUser().GetType().Name)
        {
            case "Developer":
                user = servise.GetUser() as Developer;
                break;
            case "Planner":
                user = servise.GetUser() as Planner;
                break;
        }
    }


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        if (e.FileCount > maxAllowedFiles || e.FileCount < maxAllowedFiles)
            return;
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            loadedFiles.Add(file);
            var path = Path.Combine(Environment.ContentRootPath,
                    "wwwroot", "unsafe",
                    file.Name);
            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(10000000000000).CopyToAsync(fs);
        }
        isLoading = false;
    }

    private void Delete()
    {
        
    }


    private void AddToDB(/*IBrowserFile file*/)
    {
        //FileSystemService fs = new FileSystemService();
        //string path = Path.Combine(Environment.ContentRootPath,
        //                "wwwroot", "unsafe",
        //                file.Name);
        //fs.UploadImageToDb(file, path);
        //loadedFiles.Remove(file);
    }
}


