@page "/projectWaterSupply"

@using Microsoft.Extensions.Logging
@using pwGazWater.Data

@inject IWebHostEnvironment Environment
@inject SingletonServise servise
@inject NavigationManager manager

@if (user.GetType().Name == "Developer")
{
    <table class="table"> 
        <thead>
            <tr>
                <th>Documents name</th>
                <th>Select file</th>
                <th>Add to DB</th>
                <th>Delete</th>
                <th>Load</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Акт обследования и выбора трассы сети водоснабжения</td>
                <td> <InputFile OnChange="LoadFiles" multiple/> </td>
                <td> <button type="button" class="btn btn-success" @onclick=AddToDB>Add</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => Delete()">delet</button> </td>
                <td> <button type="button" class="btn btn-info">Load</button></td>
            </tr>
        @*<tr>
                <td>Акт обследования и выбора места под проектируемую скважину</td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                <td> <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button></td>
            </tr>
            <tr>
                <td> Согласованный ситуационной план (М1:10000 или М1:25000) с нанесением источников воды
                    (скважин, родников и т.п.), существующих водонапорных башен, предполагаемой трассой водопровода
                    и места врезки в существующую сеть</td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                <td>
                    <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button>
                </td>
            </tr>
            <tr>
                <td>План населённого пункта в М1:1000 или М1:500 (топографическая съемка)</td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                <td>
                    <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button>
                </td>
            </tr>
            <tr>
                <td>Техинические условия на водоснабжение</td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                <td>
                    <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button>
                </td>
            </tr>
            <tr>
                <td>Техинические условия на электроснабжение (для насосной станции первого или второго подъема</td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                    <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                    <td>
                    <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button>
                    </td>
            </tr>
            <tr>
                <td>Градостроительный план земельного участка</td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                <td>
                    <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button>
                </td>
            </tr>
            <tr>
                <td>Справка согласования с собственниками земельных участков</td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                <td>
                    <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button>
                </td>
            </tr>
            <td>Докумен, подтверждающий проведение межевания с присвоением кадастрового номера земельного участка
                под строительство водопровода и сооружений на нем
            </td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                <td>
            <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button>
                </td>
            </tr>
            <td>Заключение Органа Ростпотребнадзора санитарно-эпидемиологической службы по отводу</td>
                <td> <button type="button" class="btn btn-success" @onclick="() => AddToDB(file)">Save</button> </td>
                <td> <button type="button" class="btn btn-danger" @onclick="() => AddToDB(file)">delet</button> </td>
                <td>
                    <button type="button" class="btn btn-info" @onclick="() => AddToDB(file)">Load</button>
                </td>
        </tr>*@
        </tbody>
    </table>
    <h1>@tr</h1>
}
else
{
    
}


@code {
    private IBrowserFile loadedFile;
    private bool isLoading;
    int maxAllowedFiles = 1;
    User user;
    string tr;

    protected override void OnInitialized()
    {
        switch (servise.GetUser().GetType().Name)
        {
            case "Developer":
                user = servise.GetUser() as Developer;
                break;
            case "Planner":
                user = servise.GetUser() as Planner;
                break;
        }
        
    }


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            loadedFile = e.File;
            var path = Path.Combine(Environment.ContentRootPath,
                    "wwwroot", "files",
                loadedFile.Name);
            await using FileStream fs = new(path, FileMode.Create);
            await loadedFile.OpenReadStream(10000000000000).CopyToAsync(fs);
        }
        catch( Exception ms)
        {
            tr = ms.Message;
        }

    }

    private void Delete()
    {

    }


    private void AddToDB()
    {
        if (loadedFile != null)
        {
            FileSystemService fs = new FileSystemService();
            string path = Path.Combine(Environment.ContentRootPath,
                            "wwwroot", "files",
                            loadedFile.Name);
            fs.UploadToDb(loadedFile, path);
            switch (servise.GetUser().GetType().Name)
            {
                case "Developer":
                    (user as Developer).Documents.Add(new Document(loadedFile.Name, path, false));
                    Mongo.Replace(user.Login, user);
                    break;
                case "Planner":
                    //(user as Planner).Documents.Add(new Document(loadedFile.Name, path, false));
                    break;
            }
        }
        else
        {
            return;
        }
    }
}


